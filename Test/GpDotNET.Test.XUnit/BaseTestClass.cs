using GPdotNet.BasicTypes;
using GPdotNet.Core;
using GPdotNet.Data;
using GPdotNet.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
namespace gpdotnet.xunit
{
    public class BaseTestClass
    {
        protected Parameters param = Parameters.FromString("500;RMSE;2;5;6;1;0;0;0;0;1;5;0.9;0.05;0.2;2;0;0.5");
        double[] constants = new double[] { 0.1234, 1.542 };

        public string[] sampleChoromosem = new string[] {
                                    "2000&2:2000&2:2037&1:2000&2:1007&-1:1005&-1:2003&2:1004&-1:2003&2:2002&2:1006&-1:2000&2:1002&-1:1007&-1:2002&2:2000&2:1008&-1:1009&-1:2037&1:1007&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:1009&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2000&2:2035&1:1006&-1:2000&2:1003&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:2000&2:2035&1:1006&-1:2002&2:2003&2:2002&2:1005&-1:1001&-1:2037&1:1009&-1:1003&-1:2000&2:2000&2:1008&-1:2003&2:1008&-1:1007&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:2037&1:2000&2:1001&-1:1001&-1:2000&2:2003&2:1005&-1:1006&-1:2000&2:1005&-1:1006&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:2037&1:2002&2:1004&-1:1004&-1:2000&2:2037&1:2000&2:2037&1:1000&-1:2002&2:1005&-1:1001&-1:2003&2:1008&-1:2002&2:2035&1:1006&-1:2037&1:1007&-1:2000&2:2037&1:1002&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:1005&-1:2000&2:2003&2:2000&2:1004&-1:1005&-1:1004&-1:1005&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:2037&1:2000&2:1008&-1:2003&2:1002&-1:1004&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2003&2:2000&2:2000&2:2000&2:1009&-1:1006&-1:2000&2:1003&-1:1008&-1:2035&1:1005&-1:2000&2:2002&2:1005&-1:1001&-1:2002&2:2002&2:1006&-1:1001&-1:1001&-1:2000&2:2035&1:1006&-1:1008&-1:2000&2:2000&2:1004&-1:2000&2:2037&1:2000&2:1008&-1:1002&-1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:2037&1:1001&-1:2003&2:2000&2:1009&-1:2037&1:2000&2:1004&-1:1006&-1:2001&2:1001&-1:2000&2:2035&1:1006&-1:2002&2:1003&-1:1001&-1:2000&2:2037&1:2000&2:1004&-1:1004&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2003&2:2000&2:2000&2:1005&-1:2000&2:1006&-1:1008&-1:2035&1:1004&-1:2000&2:2035&1:2000&2:1001&-1:1005&-1:2002&2:1008&-1:1006&-1:2000&2:1007&-1:1008&-1:2000&2:2000&2:1004&-1:2000&2:2037&1:1004&-1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2035&1:1005&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2003&2:2000&2:1008&-1:1005&-1:1005&-1:2000&2:2035&1:1006&-1:2002&2:2035&1:2000&2:1001&-1:1009&-1:1003&-1:2000&2:2037&1:2037&1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:1006&-1:2000&2:2003&2:1005&-1:1006&-1:2000&2:1005&-1:1006&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2003&2:2000&2:2000&2:1000&-1:1005&-1:2035&1:1004&-1:2000&2:2002&2:1005&-1:1001&-1:2002&2:1008&-1:1001&-1:2000&2:2035&1:2037&1:2002&2:1005&-1:1004&-1:1008&-1:2000&2:2000&2:1004&-1:2000&2:2037&1:1004&-1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:1006&-1:2003&2:2000&2:1009&-1:2000&2:2000&2:1001&-1:1004&-1:2037&1:1005&-1:1000&-1:2000&2:2037&1:2000&2:1005&-1:1007&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:2037&1:1005&-1:2000&2:1001&-1:2003&2:2002&2:2002&2:1002&-1:1004&-1:2037&1:1004&-1:2002&2:2000&2:1008&-1:1009&-1:1001&-1:2000&2:2037&1:1002&-1:2000&2:2035&1:1006&-1:1008&-1:",
                                    "2000&2:1001&-1:2000&2:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2000&2:1005&-1:1007&-1:2000&2:2000&2:1001&-1:2002&2:1005&-1:1006&-1:2000&2:2035&1:1006&-1:2000&2:1001&-1:1001&-1:2000&2:2037&1:2002&2:1005&-1:1001&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2003&2:1004&-1:1008&-1:2000&2:2037&1:2003&2:1003&-1:1001&-1:1001&-1:2000&2:2000&2:1008&-1:2000&2:1006&-1:2003&2:2003&2:1003&-1:1008&-1:2000&2:1004&-1:1000&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:1005&-1:2000&2:2003&2:2002&2:1005&-1:2000&2:1005&-1:1007&-1:2037&1:2000&2:1003&-1:1009&-1:1008&-1:2000&2:2000&2:2003&2:2037&1:2000&2:1000&-1:1002&-1:2001&2:1006&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2003&2:2000&2:2000&2:1006&-1:2000&2:1008&-1:1006&-1:2035&1:1004&-1:2000&2:2035&1:1006&-1:2002&2:1008&-1:1005&-1:2000&2:1004&-1:1008&-1:2000&2:2000&2:1004&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2003&2:2000&2:2037&1:1005&-1:2035&1:1004&-1:2000&2:1000&-1:2002&2:1008&-1:1001&-1:2000&2:1007&-1:1004&-1:2000&2:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:1005&-1:2000&2:2003&2:2000&2:1004&-1:1005&-1:2000&2:1008&-1:2002&2:1000&-1:1006&-1:1005&-1:2000&2:2037&1:2002&2:2000&2:2037&1:1006&-1:2037&1:1004&-1:2037&1:1001&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:1005&-1:1005&-1:2000&2:2000&2:2003&2:2037&1:2000&2:1000&-1:1005&-1:2001&2:2000&2:1009&-1:1006&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:2037&1:1002&-1:2003&2:2000&2:1009&-1:2037&1:2003&2:1004&-1:1007&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:2000&2:1006&-1:1001&-1:2000&2:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2003&2:2000&2:2000&2:2000&2:1009&-1:1006&-1:2000&2:1004&-1:1008&-1:2035&1:1004&-1:2000&2:2037&1:1007&-1:2002&2:1008&-1:1001&-1:2000&2:2035&1:1006&-1:1004&-1:2000&2:2000&2:1004&-1:2000&2:2037&1:1004&-1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:1006&-1:2003&2:2000&2:1009&-1:2000&2:2000&2:1001&-1:1004&-1:2037&1:1005&-1:2000&2:2000&2:1001&-1:1007&-1:2000&2:1001&-1:2035&1:1001&-1:2000&2:2037&1:2000&2:1005&-1:1007&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:2037&1:2000&2:1001&-1:1001&-1:2000&2:2003&2:1005&-1:2000&2:2003&2:1008&-1:1007&-1:2002&2:1007&-1:1004&-1:2000&2:1005&-1:1006&-1:2000&2:2000&2:2003&2:1007&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:2037&1:2000&2:1001&-1:1001&-1:2000&2:2000&2:1006&-1:1002&-1:2000&2:1007&-1:1006&-1:2000&2:2000&2:2003&2:1000&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:2037&1:2000&2:1001&-1:1001&-1:2000&2:2000&2:1006&-1:1002&-1:2000&2:1007&-1:1008&-1:2000&2:2000&2:2003&2:1000&-1:2001&2:1000&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2003&2:1006&-1:2000&2:1008&-1:1001&-1:2002&2:2002&2:1008&-1:1007&-1:2000&2:1007&-1:1004&-1:2000&2:2037&1:2035&1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:1005&-1:2000&2:2003&2:2000&2:1004&-1:1005&-1:2000&2:2003&2:1005&-1:1007&-1:1000&-1:1005&-1:2000&2:2000&2:2037&1:1001&-1:2037&1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:1005&-1:2000&2:2003&2:2002&2:1005&-1:2000&2:1005&-1:1007&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:1008&-1:2000&2:2000&2:2003&2:2037&1:2000&2:1000&-1:1005&-1:2001&2:1006&-1:1008&-1:1008&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:1001&-1:2000&2:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2002&2:1008&-1:2000&2:1006&-1:1000&-1:",
                                    "2000&2:2003&2:2003&2:2000&2:2000&2:1001&-1:2000&2:1003&-1:1006&-1:2002&2:2000&2:1004&-1:1008&-1:1001&-1:2000&2:2035&1:1006&-1:2002&2:1008&-1:1005&-1:1009&-1:2000&2:2000&2:2037&1:2000&2:1000&-1:1005&-1:2002&2:2000&2:2002&2:1006&-1:1005&-1:1006&-1:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2002&2:2000&2:2000&2:1004&-1:1007&-1:2035&1:1006&-1:2035&1:2037&1:1008&-1:2000&2:2002&2:2003&2:1001&-1:2000&2:1005&-1:2000&2:1006&-1:1005&-1:2002&2:1004&-1:1005&-1:2003&2:2037&1:1004&-1:2037&1:1008&-1:",
                                    "2000&2:2000&2:2037&1:2002&2:2002&2:1008&-1:1009&-1:2035&1:1006&-1:2000&2:2037&1:2000&2:2037&1:1000&-1:2002&2:1005&-1:1001&-1:2003&2:2003&2:2003&2:1007&-1:1008&-1:2000&2:1004&-1:1008&-1:2002&2:2035&1:1006&-1:2037&1:1007&-1:2000&2:2037&1:1002&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:2037&1:1001&-1:2000&2:1008&-1:1001&-1:2000&2:2000&2:1004&-1:2000&2:2037&1:1000&-1:1006&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2000&2:1009&-1:2000&2:2037&1:2000&2:1008&-1:2002&2:1000&-1:1001&-1:2003&2:2002&2:1006&-1:2037&1:1003&-1:2002&2:2000&2:1008&-1:1001&-1:1001&-1:2000&2:2037&1:1002&-1:2000&2:1004&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2003&2:2000&2:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:1005&-1:1005&-1:2000&2:2035&1:1006&-1:2002&2:2035&1:2000&2:1001&-1:1009&-1:1003&-1:2000&2:2000&2:1008&-1:1004&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:",
                                    "2000&2:2003&2:2003&2:2000&2:2037&1:1005&-1:2035&1:1004&-1:2000&2:1000&-1:2002&2:1008&-1:1001&-1:2000&2:1007&-1:1004&-1:2000&2:1005&-1:2000&2:2035&1:1006&-1:2002&2:1005&-1:1001&-1:"
                                     };

        public string[] sampleChoromosem1 = new string[] {
                                    "2000200020372000100710052003100420032002100620001002100720022000100810092037100720002000200310072001100010081009200020351006200210051001",
                                    "200020032000203510062000100320002035100620021005100120002035100620022003200210051001203710091003200020001008200310081007200020351006200210051001",
                                    "200020002037200010011001200020031005100620001005100620002000200310072001100010081008200020351006200210051001",
                                    "200020002037200210041004200020372000203710002002100510012003100820022035100620371007200020371002200020351006200210051001",
                                    "20002000100520002003200010041005100410052000200020031007200110001008203720001008200310021004200020351006200210051001",
                                    "20002003200320002000200010091006200010031008203510052000200210051001200220021006100110012000203510061008200020001004200020372000100810021006200020351006200210051001",
                                    "200020002037100120032000100920372000100410062001100120002035100620021003100120002037200010041004200020351006200210051001",
                                    "20002003200320002000100520001006100820351004200020352000100110052002100810062000100710082000200010042000203710041006200020351006200210051001",
                                    "20002035100520002000200310072001100010081008200020351006200210051001",
                                    "20002003200320001008100510052000203510062002203520001001100910032000203720371006200020351006200210051001",
                                    "200020001006200020031005100620001005100620002000200310072001100010081008200020351006200210051001",
                                    "200020032003200020001000100520351004200020021005100120021008100120002035203720021005100410082000200010042000203710041006200020351006200210051001",
                                    "200020001006200320001009200020001001100420371005100020002037200010051007200020351006200210051001",
                                    "2000200020371005200010012003200220021002100420371004200220001008100910012000203710022000203510061008",
                                    "2000100120001005200020351006200210051001",
                                    "2000200320001005100720002000100120021005100620002035100620001001100120002037200210051001200020351006200210051001",
                                    "20002003200310041008200020372003100310011001200020001008200010062003200310031008200010041000200020351006200210051001",
                                    "20002000100520002003200210052000100510072037200010031009100820002000200320372000100010022001100610081008200020351006200210051001",
                                    "200020032003200020001006200010081006203510042000203510062002100810052000100410082000200010041008200020351006200210051001",
                                    "200020032003200020371005203510042000100020021008100120001007100420001005200020351006200210051001",
                                    "200020001005200020032000100410052000100820021000100610052000203720022000203710062037100420371001200020351006200210051001",
                                    "20002000100510052000200020032037200010001005200120001009100610081008200020351006200210051001",
                                    "200020002037100220032000100920372003100410072000203510062002100520001006100120001005200020351006200210051001",
                                    "200020032003200020002000100910062000100410082035100420002037100720021008100120002035100610042000200010042000203710041006200020351006200210051001",
                                    "2000200010062003200010092000200010011004203710052000200010011007200010012035100120002037200010051007200020351006200210051001",
                                    "200020002037200010011001200020031005200020031008100720021007100420001005100620002000200310072001100010081008200020351006200210051001",
                                    "200020002037200010011001200020001006100220001007100620002000200310002001100010081008200020351006200210051001",
                                    "200020002037200010011001200020001006100220001007100820002000200310002001100010081008200020351006200210051001",
                                    "200020032003100620001008100120022002100810072000100710042000203720351006200020351006200210051001",
                                    "20002000100520002003200010041005200020031005100710001005200020002037100120371006200020351006200210051001",
                                    "2000200010052000200320021005200010051007200020351006200210051001100820002000200320372000100010052001100610081008200020351006200210051001",
                                    "2000100120001005200020351006200210051001",
                                    "20021008200010061000",
                                    "2000200320032000200010012000100310062002200010041008100120002035100620021008100510092000200020372000100010052002200020021006100510061005200020351006200210051001",
                                    "2000200220002000100410072035100620352037100820002002200310012000100520001006100520021004100520032037100420371008",
                                    "200020002037200220021008100920351006200020372000203710002002100510012003200320031007100820001004100820022035100620371007200020371002200020351006200210051001",
                                    "20002000203710012000100810012000200010042000203710001006200020351006200210051001",
                                    "2000200010092000203720001008200210001001200320021006203710032002200010081001100120002037100220001004200210051001",
                                    "2000200320032000200020351006200210051001100510052000203510062002203520001001100910032000200010081004200020351006200210051001",
                                    "200020032003200020371005203510042000100020021008100120001007100420001005200020351006200210051001"
                                     };

        /// <summary>
        /// Old implementation of FromString methods to get Node type from string. 
        /// </summary>
        /// <param name="root"></param>
        /// <param name="strItems"></param>
        public static void FromString(Node root, string strItems)
        {
            if (string.IsNullOrEmpty(strItems))
                throw new Exception("Empty string.");

            //Collection holds tree nodes
            Stack<Node> dataTree = new Stack<Node>();


            //Add tail recursion
            int index = 0;
            dataTree.Push(root);
            Node node = null;
            while (dataTree.Count > 0)
            {
                //get next node
                node = dataTree.Pop();

                //Extract value from string
                if (strItems.Length >= index + 4)
                {
                    var str = strItems.Substring(index, 4);
                    //parse node value
                    if (!int.TryParse(str, out int value))
                        value = 0;
                    //
                    index += 4;
                    node.Value = value;

                    //check if node if function node
                    if (Globals.IsFunction(node.Value))
                    {
                        int arity = Globals.FunctionArity(node.Value);
                        node.initializeNodeOffspring(arity);

                        for (int i = arity - 1; i >= 0; i--)
                        {
                            //
                            node.Children[i].Level = (short)(node.Level + 1);
                            dataTree.Push(node.Children[i]);
                        }

                    }
                }
            }

            return;
        }
        //first 4 algebraical operations +,-,*,/
        public Function[] funSet = new Function[]
        {
            new Function() { Id=2000 }, new Function() { Id=2001 },new Function() { Id=2002},new Function() { Id=2003 },
        };

        //sample of terminal set
        public int[] terSet = new int[] { 1000, 1001, 1002, 1003 };

        /// <summary>
        /// Data sample  to test features in GPdotNET.
        /// first two columns are input parameters
        /// last three columns should represent numeric binary and categorical output.
        /// </summary>
        public double[][] trainingDataSet = new double[][] {
        new double[]{7   ,0.52   ,11.20   ,1   ,2},
        new double[]{2   ,0.60   ,5.33    ,0   ,1},
        new double[]{5   ,0.43   ,8.85    ,1   ,1},
        new double[]{6   ,0.97   ,13.31   ,1   ,2},
        new double[]{5   ,0.47   ,9.00    ,1   ,1},
        new double[]{3   ,0.26   ,5.00    ,0   ,1},
        new double[]{7   ,0.70   ,12.32   ,1   ,2},
        new double[]{5   ,0.36   ,8.49    ,1   ,1},
        new double[]{9   ,0.38   ,12.91   ,1   ,2},
        new double[]{2   ,0.64   ,5.52    ,0   ,1},
        new double[]{2   ,0.77   ,6.08    ,0   ,1},
        new double[]{6   ,0.08   ,7.10    ,0   ,1},
        new double[]{9   ,0.46   ,13.22   ,1   ,2},
        new double[]{7   ,0.46   ,11.06   ,1   ,2},
        new double[]{9   ,0.28   ,12.66   ,1   ,2},
        new double[]{9   ,0.13   ,11.35   ,1   ,2},
        new double[]{8   ,0.11   ,9.87    ,1   ,1},
        new double[]{2   ,0.84   ,6.35    ,0   ,1},
        new double[]{7   ,0.68   ,12.12   ,1   ,2},
        new double[]{1   ,0.32   ,2.27    ,0   ,0},
        new double[]{9   ,0.25   ,12.53   ,1   ,2},
        new double[]{10  ,0.46   ,14.53   ,1   ,2},
        new double[]{5   ,0.32   ,8.24    ,1   ,1},
        new double[]{2   ,0.41   ,4.37    ,0   ,1},
        new double[]{8   ,0.11   ,9.87    ,1   ,1},
        new double[]{3   ,0.11   ,3.87    ,0   ,0},
        new double[]{9   ,0.89   ,19.78   ,1   ,2},
        new double[]{5   ,0.92   ,10.45   ,1   ,2},
        new double[]{5   ,0.94   ,10.58   ,1   ,2},
        new double[]{7   ,0.72   ,12.53   ,1   ,2},
        new double[]{5   ,0.60   ,9.34    ,1   ,1},
        new double[]{8   ,0.53   ,12.41   ,1   ,2},
        new double[]{4   ,0.21   ,6.00    ,0   ,1},
        new double[]{6   ,0.50   ,10.14   ,1   ,2},
        new double[]{3   ,0.74   ,7.50    ,0   ,1},
        new double[]{1   ,0.19   ,1.76    ,0   ,0},
        new double[]{4   ,1.00   ,9.24    ,1   ,1},
        new double[]{5   ,0.18   ,7.04    ,0   ,1},
        new double[]{1   ,0.04   ,1.16    ,0   ,0},
        new double[]{7   ,0.47   ,11.08   ,1   ,2},
        new double[]{2   ,0.26   ,3.54    ,0   ,0},
        new double[]{8   ,0.84   ,16.82   ,1   ,2},
        new double[]{10  ,0.85   ,21.00   ,1   ,2},

    };

        public IData Create_Numeric_TrainingDataSet()
        {
            
            var nds = trainingDataSet.Select(x=> new double[] {x[0],x[1],x[2]}).ToArray();
            var d = new ExperimentData(nds, null, constants);
            return d;

        }
        public IData Create_Binary_TrainingDataSet()
        {
             
            var nds = trainingDataSet.Select(x => new double[] { x[0], x[1], x[3] }).ToArray();
            var d = new ExperimentData(nds, null, constants);
            return d;

        }
        public IData Create_Category_TrainingDataSet()
        {
            
            var nds = trainingDataSet.Select(x => new double[] { x[0], x[1], x[4] }).ToArray();
            var d = new ExperimentData(nds, null, constants);
            return d;

        }

        protected Parameters initBinaryClassParameters()
        {
            Parameters p = new Parameters
            {
                ArgValue = 1,
                BroodSize = 2,
                Constants = constants,
                ConstFrom = 0,
                ConstTo = 2,
                ConstNum = 2,
                CrossoverProbability = 0.95f,
                Threshold = 0.5f,
                Elitism = 1,
                FitnessFunction = null,
                FitnessName = "ACC",
                InitializationMethod = 0,
                MaxInitLevel = 5,
                MaxLevel = 7,
                MutationProbability = 0.1f,
                OutputType = ColumnType.Binary,
                ParallelProcessing = false,
                PopulationSize = 100,
                IsProtectedOperation = false,
                RootFunctionNode = new Function() { Id = 2049, Name = "Step", Arity = 1, HasParameter = true, Parameter = 2f, Parameter2 = 2 },
                RootName = "None",
                SelectionMethod = SelectionMethod.FitnessProportionateSelection,
                SelectionProbability = 0.1f,
            };
            return p;

            
        }
        protected Parameters initMultiClassParameters()
        {
            Parameters p = new Parameters
            {
                ArgValue = 1,
                BroodSize = 2,
                Constants = constants,
                ConstFrom = 0,
                ConstTo = 2,
                ConstNum = 2,
                CrossoverProbability = 0.95f,
                Threshold = 0.5f,
                Elitism = 1,
                FitnessFunction = null,
                FitnessName = "ACC",
                InitializationMethod = 0,
                MaxInitLevel = 5,
                MaxLevel = 7,
                MutationProbability = 0.1f,
                OutputType = ColumnType.Category,
                ParallelProcessing = false,
                PopulationSize = 100,
                IsProtectedOperation = false,
                RootFunctionNode = new Function() { Id = 2051, Name = "Softmax", Arity = 3 , Parameter2 = 3 },
                RootName = "None",
                SelectionMethod = SelectionMethod.FitnessProportionateSelection,
                SelectionProbability = 0.1f,
                //TourSize = 3
            };
            return p;
            //parStr = "500;5;2;5;6;1;0;0;0;0;1;5;0.9;0.05;0.2;2;3;0.5";

            //return parStr;
        }
        protected Parameters initRegressionParameters()
        {
            Parameters p = new Parameters
            {
                ArgValue = 1,
                BroodSize = 2,
                Constants = constants,
                ConstFrom = 0,
                ConstTo = 2,
                ConstNum = 2,
                CrossoverProbability = 0.95f,
                Threshold = 0.5f,
                Elitism = 1,
                FitnessFunction = null,
                FitnessName = "RMSE",
                InitializationMethod = 0,
                MaxInitLevel = 5,
                MaxLevel = 7,
                MutationProbability = 0.1f,
                OutputType = ColumnType.Numeric,
                ParallelProcessing = false,
                PopulationSize = 100,
                IsProtectedOperation = false,
                RootFunctionNode = null,
                RootName = "None",
                SelectionMethod = SelectionMethod.FitnessProportionateSelection,
                SelectionProbability = 0.1f,
                //TourSize = 3
            };
            return p;
            // p.FromString("500;5;2;5;6;1;0;0;0;0;1;5;0.9;0.05;0.2;2;0;0.5");
        }
    }
}